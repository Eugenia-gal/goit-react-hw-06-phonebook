{"version":3,"sources":["Components/Container/Container.styled.jsx","Components/Container/Container.jsx","Components/Form/Form.styled.jsx","Components/Form/Form.jsx","Components/ContactList/ContactList.styled.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.styled.jsx","Components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["CustomContainer","Container","children","CustomForm","Form","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","id","value","preventDefault","htmlFor","type","pattern","title","required","onChange","CustomContactList","ListContactEl","ContactList","contacts","onDeleteContact","map","contact","onClick","FilterContainer","customId","shortid","generate","Filter","App","key","initialValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","data","newContact","indexOf","alert","prevState","normalizedFilter","toLowerCase","includes","visibleContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAEA,IAIeA,EAJM,gF,OCUNC,MARf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OAAO,cAAC,EAAD,UAAkBA,KCH3B,IAgBeC,EAhBC,6LC8DDC,MA5Df,YAA6B,IAAbC,EAAY,EAAZA,SACd,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAe,SAAAC,GACnB,MAAsBA,EAAEC,OAAhBC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,MACZ,OAAQD,GACN,IAAK,OACHN,EAAQO,GACR,MACF,IAAK,SACHL,EAAUK,GACV,MACF,QACE,SAYN,OACE,eAAC,EAAD,CAAYV,SATO,SAAAO,GACnBA,EAAEI,iBAEFX,EADmB,CAAEE,KAAMA,EAAME,OAAQA,IAEzCD,EAAQ,IACRE,EAAU,KAIV,UACE,uBAAOO,QAAQ,OAAf,kBACA,uBACEC,KAAK,OACLX,KAAK,OACLO,GAAG,OACHK,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRN,MAAOR,EACPe,SAAUX,IAEZ,uBAAOM,QAAQ,SAAf,mBAEA,uBACEC,KAAK,OACLX,KAAK,SACLO,GAAG,SACHK,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRN,MAAON,EACPa,SAAUX,IAEZ,wBAAQO,KAAK,SAAb,6B,gBCrDN,IAMeK,EANQ,iHCGvB,IAAMC,EAAa,oJAoCJC,MA5Bf,YAAqD,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBAC/B,OACE,cAAC,EAAD,UACGD,EAASE,KAAI,SAAAC,GAAO,OACnB,eAACL,EAAD,WACE,iCACGK,EAAQtB,KADX,KACmBsB,EAAQpB,UAE3B,wBAAQS,KAAK,SAASY,QAAS,kBAAMH,EAAgBE,EAAQf,KAA7D,sBAJkBe,EAAQf,UCfpC,IAOeiB,EAPM,sICGfC,EAAWC,IAAQC,WAuBVC,MArBf,YAAsC,IAApBpB,EAAmB,EAAnBA,MAAOO,EAAY,EAAZA,SACvB,OACE,cAAC,EAAD,UACE,yDAEE,uBACER,GAAIkB,EACJjB,MAAOA,EACPO,SAAUA,EACVf,KAAK,iBCoDA6B,MA/Cf,WACE,MAbsB,SAACC,EAAKC,GAC5B,MAA0BhC,oBAAS,WAAO,IAAD,EACvC,iBAAOiC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQN,WAA9C,QAAuDC,KADzD,mBAAOM,EAAP,KAAcC,EAAd,KAQA,OAJAC,qBAAU,WACRL,OAAOC,aAAaK,QAAQV,EAAKE,KAAKS,UAAUJ,MAC/C,CAACP,EAAKO,IAEF,CAACA,EAAOC,GAIiBI,CAAgB,WAAY,IAA5D,mBAAOvB,EAAP,KAAiBwB,EAAjB,KACA,EAA4B5C,mBAAS,IAArC,mBAAO6C,EAAP,KAAeC,EAAf,KA+BA,OACE,eAAC,EAAD,WACE,2CACA,cAAC,EAAD,CAAM/C,SAhCS,SAAAgD,GACjB,IAAMC,EAAU,aAAKxC,GAAImB,IAAQC,YAAemB,IAEM,IADjC3B,EAASE,KAAI,SAAAC,GAAO,OAAIA,EAAQtB,QACvBgD,QAAQF,EAAK9C,MAGzCiD,MAAM,GAAD,OAAIH,EAAK9C,KAAT,4BAIP2C,GAAY,SAAAO,GAAS,OAAKH,GAAL,mBAAoBG,UAuBvC,0CACA,cAAC,EAAD,CAAQ1C,MAAOoC,EAAQ7B,SAjBJ,SAAAV,GACrB,IAAQG,EAAUH,EAAEC,OAAZE,MACRqC,EAAUrC,MAgBR,cAAC,EAAD,CACEW,SAdkB,WACtB,IAAMgC,EAAmBP,EAAOQ,cAChC,OAAOjC,EAASyB,QAAO,SAAAtB,GAAO,OAC5BA,EAAQtB,KAAKoD,cAAcC,SAASF,MAWxBG,GACVlC,gBAxBgB,SAAAb,GACpBoC,GAAY,SAAAO,GAAS,OAAIA,EAAUN,QAAO,SAAAtB,GAAO,OAAIA,EAAQf,KAAOA,eC3BzDgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2bc4ca9.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\n\r\nconst CustomContainer = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nexport default CustomContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CustomContainer from 'Components/Container/Container.styled';\r\n\r\nfunction Container({ children }) {\r\n  return <CustomContainer>{children}</CustomContainer>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst CustomForm = styled.form`\r\n  border: 2px solid black;\r\n  border-radius: 3px;\r\n  padding: 10px;\r\n  width: 300px;\r\n\r\n  & button {\r\n    margin-top: 10px;\r\n  }\r\n\r\n  & label,\r\n  input {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport default CustomForm;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CustomForm from './Form.styled';\r\n\r\nfunction Form({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { id, value } = e.target;\r\n    switch (id) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newContact = { name: name, number: number };\r\n    onSubmit(newContact);\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <CustomForm onSubmit={handleSubmit}>\r\n      <label htmlFor=\"name\">Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        id=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <label htmlFor=\"number\">Phone</label>\r\n\r\n      <input\r\n        type=\"text\"\r\n        name=\"number\"\r\n        id=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={number}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\">Add Contact</button>\r\n    </CustomForm>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Form;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst CustomContactList = styled.ul`\r\n  padding: 10px;\r\n  width: 300px;\r\n  list-style-type: square;\r\n`;\r\n\r\nexport default CustomContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled/macro';\r\nimport CustomContactList from './ContactList.styled';\r\n\r\nconst ListContactEl = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <CustomContactList>\r\n      {contacts.map(contact => (\r\n        <ListContactEl key={contact.id}>\r\n          <span>\r\n            {contact.name}: {contact.number}\r\n          </span>\r\n          <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\r\n            Delete\r\n          </button>\r\n        </ListContactEl>\r\n      ))}\r\n    </CustomContactList>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import styled from '@emotion/styled/macro';\r\n\r\nconst FilterContainer = styled.div`\r\n  border: 1px dashed black;\r\n  padding: 10px;\r\n  width: 300px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nexport default FilterContainer;\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport FilterContainer from './Filter.styled';\r\n\r\nconst customId = shortid.generate();\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <FilterContainer>\r\n      <label>\r\n        Find contact by name\r\n        <input\r\n          id={customId}\r\n          value={value}\r\n          onChange={onChange}\r\n          name=\"filter\"\r\n        ></input>\r\n      </label>\r\n    </FilterContainer>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Container from 'Components/Container';\nimport Form from 'Components/Form';\nimport shortid from 'shortid';\nimport ContactList from 'Components/ContactList';\nimport Filter from 'Components/Filter';\n// import initialContacts from 'Data/contacts.json';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? initialValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const addContact = data => {\n    const newContact = { id: shortid.generate(), ...data };\n    const contactNames = contacts.map(contact => contact.name);\n    const isRepeat = contactNames.indexOf(data.name) !== -1;\n\n    if (isRepeat) {\n      alert(`${data.name} is already in Contacts`);\n      return;\n    }\n\n    setContacts(prevState => [newContact, ...prevState]);\n  };\n\n  const deleteContact = id => {\n    setContacts(prevState => prevState.filter(contact => contact.id !== id));\n  };\n\n  const filterContacts = e => {\n    const { value } = e.target;\n    setFilter(value);\n  };\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Form onSubmit={addContact} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={filterContacts} />\n      <ContactList\n        contacts={visibleContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}